{"/Users/01258615/go/src/github.com/77Vincent/IDEV/src/renderer/components/editor.jsx":{"name":"editor.jsx","content":"import * as React from 'react';\nimport CodeMirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/matchtags';\nimport 'codemirror/addon/comment/comment';\nimport 'codemirror/theme/darcula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/keymap/vim';\n\n// import { OPEN_FILES } from '../../main/actions';\n\nexport default class Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textareaNode = React.createRef();\n    this.state = {\n      content: '',\n    };\n  }\n\n  componentDidMount() {\n    const editor = CodeMirror.fromTextArea(this.textareaNode, {\n      mode: 'javascript',\n      lineNumbers: true,\n      theme: 'darcula',\n      autofocus: true,\n      autoCloseBrackets: true,\n      matchtags: true,\n      matchBrackets: true,\n      indentUnit: 4,\n      keyMap: 'vim',\n      extraKeys: {\n        'Cmd-/': (cm) => {\n          cm.execCommand('toggleComment');\n        },\n      },\n    });\n\n    editor.setValue(this.state.content);\n    editor.setSize('100%', '100%');\n\n    window.electron.ipcRenderer.on('OPEN_FILES', (args) => {\n      const { content } = args[0];\n      this.setState({ content });\n      editor.setValue(content);\n    });\n\n    window.electron.ipcRenderer.on('EDITOR_LOAD_FILE', (args) => {\n      const { content } = args[0];\n      this.setState({ content });\n      editor.setValue(content);\n    });\n  }\n\n  render() {\n    return (\n      <textarea\n        ref={(ref) => {\n          this.textareaNode = ref;\n        }}\n      />\n    );\n  }\n}\n"},"/Users/01258615/go/src/github.com/77Vincent/IDEV/src/renderer/components/tabs.jsx":{"name":"tabs.jsx","content":"import { Box, styled, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\n\nconst ActiveTab = styled('div')(({ theme }) => {\n  return {\n    borderBottomColor: theme.palette.primary.main,\n    borderBottomWidth: 3,\n    borderBottomStyle: 'solid',\n  };\n});\n\nexport default () => {\n  const [openFileSession, setOpenFileSession] = useState('');\n  const [fileSessions, setFileSessions] = useState({});\n\n  useEffect(() => {\n    window.electron.ipcRenderer.on('OPEN_FILES', (args) => {\n      const { name, uri } = args[0];\n      setFileSessions((prevState) => {\n        return Object.assign(prevState, { [uri]: name });\n      });\n      setOpenFileSession(uri);\n    });\n  }, []);\n\n  const Tab = ({ name, uri }) => {\n    return (\n      <Box\n        onClick={() => {\n          setOpenFileSession(uri);\n          window.electron.ipcRenderer.send('LOAD_FILE', [uri]);\n        }}\n        paddingLeft={1}\n        paddingRight={1}\n      >\n        <Typography variant=\"body2\">{name}</Typography>\n      </Box>\n    );\n  };\n\n  return (\n    <Box display=\"flex\">\n      {Object.keys(fileSessions).map((key) => {\n        const file = fileSessions[key];\n        return (\n          <div key={key}>\n            {openFileSession === key ? (\n              <ActiveTab>\n                <Tab uri={key} name={file} />\n              </ActiveTab>\n            ) : (\n              <Tab uri={key} name={file} />\n            )}\n          </div>\n        );\n      })}\n    </Box>\n  );\n};\n"}}